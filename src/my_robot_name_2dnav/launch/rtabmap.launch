
<launch>
  <!-- 
       Bringup Turtlebot:
       $ roslaunch turtlebot_bringup minimal.launch
       
       Mapping:
       $ roslaunch rtabmap_ros demo_turtlebot_mapping.launch
       
       Visualization:
       $ roslaunch rtabmap_ros demo_turtlebot_rviz.launch
       
       This launch file is a one to one replacement of the gmapping_demo.launch in the 
       "SLAM Map Building with TurtleBot" tutorial:
       http://wiki.ros.org/turtlebot_navigation/Tutorials/indigo/Build%20a%20map%20with%20SLAM
       
         For localization-only after a mapping session, add argument "localization:=true" to
         demo_turtlebot_mapping.launch line above. Move the robot around until it can relocalize in 
         the previous map, then the 2D map should re-appear again. You can then follow the same steps 
         from 3.3.2 of the "Autonomous Navigation of a Known Map with TurtleBot" tutorial:
         http://wiki.ros.org/turtlebot_navigation/Tutorials/Autonomously%20navigate%20in%20a%20known%20map
    -->
  
    <arg name="database_path"     default="rtabmap.db"/>
    <arg name="localization"      default="false"/>
    <arg name="rgbd_odometry"     default="false"/>
    <arg name="args"              default="--delete_db_on_start"/>
    <arg name="rtabmapviz"        default="false"/>
  
    <arg name="wait_for_transform"  default="3.0"/> 
    <!-- 
        robot_state_publisher's publishing frequency in "turtlebot_bringup/launch/includes/robot.launch.xml" 
        can be increase from 5 to 10 Hz to avoid some TF warnings.
    -->
  
    <!-- Navigation stuff (move_base) -->
    <!--<include file="$(find my_robot_name_2dnav)/oldNav/move_base.launch"/>-->  
    <!--<include file="$(find my_robot_name_2dnav)/move_base.launch.xml"/>-->

    <!--<group ns="/stereo_camera" >-->
	
        
        
        	
        <!-- Create point cloud for the planner -->
<!--        <node pkg="nodelet" type="nodelet" name="disparity2cloud" args="load rtabmap_ros/point_cloud_xyz stereo_nodelet">

            
            <remap from="rgb/image"       to="/camera/rgb/image_rect_color"/>
            <remap from="depth/image"     to="/camera/depth_registered/image_raw"/>
            <remap from="rgb/camera_info" to="/camera/depth_registered/camera_info"/>
            <remap from="cloud"           to="/camera/depth_registered/points" />
            
            
            <param name="voxel_size" type="double" value="0.05"/>
            <param name="decimation" type="int" value="4"/>
            <param name="max_depth" type="double" value="4"/>
        </node>-->-->
        
        <!--Sync node-->
<!--        <node pkg="nodelet" type="nodelet" name="data_odom_sync" args="load rtabmap_ros/data_odom_sync standalone_nodelet">
            <remap from="rgb/image_in"       to="/camera/rgb/image_rect_color"/>
            <remap from="depth/image_in"     to="/camera/depth_registered/image_raw"/>
            <remap from="rgb/camera_info_in" to="/camera/depth_registered/camera_info"/>
            <remap from="odom_in"             to="/odom"/>
   
            <remap from="rgb/image_out"       to="/camera/rgb/image_rect_color"/>
            <remap from="depth/image_out"     to="/camera/depth_registered/image_raw"/>
            <remap from="rgb/camera_info_out" to="/camera/depth_registered/camera_info"/>
            <remap from="odom_out"            to="/odom"/>
        </node>-->
        
        
<!--        <node pkg="nodelet" type="nodelet" name="obstacles_detection" args="load rtabmap_ros/obstacles_detection stereo_nodelet">
            <remap from="cloud" to="cloudXYZ"/>
            <remap from="obstacles" to="/planner_cloud"/>

            <param name="frame_id" type="string" value="base_footprint"/>		
            <param name="map_frame_id" type="string" value="map"/>
            <param name="wait_for_transform" type="bool" value="true"/>
            <param name="min_cluster_size" type="int" value="20"/>
            <param name="max_obstacles_height" type="double" value="0.0"/>
        </node>-->
    <!--</group>-->
  
    <!-- Mapping -->
    <group ns="rtabmap">
        <node name="rtabmap" pkg="rtabmap_ros" type="rtabmap" output="screen" args="$(arg args)">
            <param name="database_path"       type="string" value="$(arg database_path)"/>
            <param name="frame_id"            type="string" value="base_footprint"/>
            <param name="odom_frame_id"       type="string" value="odom"/>
            <param name="wait_for_transform_duration"  type="double"   value="$(arg wait_for_transform)"/>
            <param name="subscribe_depth"     type="bool"   value="true"/>
            <param name="subscribe_scan"      type="bool"   value="true"/>
	
            <!-- inputs -->
            <remap from="scan"            to="/scan"/>
            <remap from="rgb/image"       to="/camera/rgb/image_rect_color"/>
            <remap from="depth/image"     to="/camera/depth_registered/image_raw"/>
            <remap from="rgb/camera_info" to="/camera/rgb/camera_info"/>
            
            <!-- output -->
<!--            <remap from="goal_out"        to="/move_base_simple/goal"/>	
            <remap from="move_base"       to="/planner/move_base"/>-->
            <remap from="grid_map"        to="/map"/>
	
            <!-- RTAB-Map's parameters: do "rosrun rtabmap rtabmap (double-dash)params" to see the list of available parameters. -->
            <param name="RGBD/ProximityBySpace"        type="string" value="true"/>    Local loop closure detection (using estimated position) with locations in WM 
            <param name="RGBD/OptimizeFromGraphEnd"    type="string" value="false"/>   Set to false to generate map correction between /map and /odom 
            <param name="Kp/MaxDepth"                  type="string" value="4.0"/>
            <param name="Reg/Strategy"                 type="string" value="1"/>       Loop closure transformation refining with ICP: 0=Visual, 1=ICP, 2=Visual+ICP 
            <param name="Icp/CoprrespondenceRatio"     type="string" value="0.3"/>
            <param name="Vis/MinInliers"               type="string" value="5"/>       3D visual words minimum inliers to accept loop closure 
            <param name="Vis/InlierDistance"           type="string" value="0.1"/>     3D visual words correspondence distance 
            <param name="RGBD/AngularUpdate"           type="string" value="0.01"/>     Update map only if the robot is moving 
            <param name="RGBD/LinearUpdate"            type="string" value="0.01"/>     Update map only if the robot is moving 
            <param name="Rtabmap/DetectionRate"        type="string" value="1"/>              RTabpMap speed: default 1 Hz 
            <param name="Rtabmap/TimeThr"              type="string" value="700"/>
            <param name="Mem/RehearsalSimilarity"      type="string" value="0.45"/>
            <param name="Optimizer/Slam2D"             type="string" value="true"/>
            <param name="Reg/Force3DoF"                type="string" value="true"/>   
            <param name="Grid/FromDepth"               type="string" value="false"/>   
            <!--<param name="approx_sync"                  type="bool"   value="true"/>-->
            <param name="stereo_approx_sync"           type="bool"   value="true"/>
            <param name="grid_size"                    type="double"   value="16"/>
<!--            <param name="RGBD/LocalLoopDetectionTime" type="string" value="false"/>     Local loop closure detection with locations in STM 
	    <param name="Mem/BadSignaturesIgnored" type="string" value="false"/>       Don't ignore bad images for 3D node creation (e.g. white walls) 
	    <param name="Mem/RehearsedNodesKept" type="string" value="false"/>   -->

            
<!--            <param name="RGBD/LocalRadius"             type="string" value="4"/>  
            <param name="Mem/RehearsalSimilarity"      type="string" value="0.30"/>
            <param name="RGBD/OptimizeFromGraphEnd"    type="string" value="true"/>
            <param name="RGBD/OptimizeVarianceIgnored" type="string" value="false"/>
            <param name="RGBD/PlanAngularVelocity"     type="string" value="1.0"/>   preference for path traversed forward -->
            
            
<!--             localization mode 
            <param     if="$(arg localization)" name="Mem/IncrementalMemory" type="string" value="false"/>
            <param unless="$(arg localization)" name="Mem/IncrementalMemory" type="string" value="true"/>
            <param name="Mem/InitWMWithAllNodes" type="string" value="$(arg localization)"/> -->
        </node>
    
         <!--visualization with rtabmapviz--> 
        <node if="$(arg rtabmapviz)" pkg="rtabmap_ros" type="rtabmapviz" name="rtabmapviz" args="-d $(find rtabmap_ros)/launch/config/rgbd_gui.ini" output="screen">
            <param name="subscribe_depth"             type="bool" value="true"/>
            <param name="subscribe_scan"              type="bool" value="true"/>
            <param name="frame_id"                    type="string" value="base_footprint"/>
            <param name="wait_for_transform_duration" type="double" value="$(arg wait_for_transform)"/>
    
            <remap from="rgb/image"       to="/camera/rgb/image_rect_color"/>
            <remap from="depth/image"     to="/camera/depth_registered/image_raw"/>
            <remap from="rgb/camera_info" to="/camera/rgb/camera_info"/>
            <remap from="scan"            to="/scan"/>
        </node>
    
    </group>
    
</launch>
